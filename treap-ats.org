#+TITLE: Treap In ATS
#+AUTHOR: Aditya Siram
#+PROPERTY: header-args    :comments no
#+OPTIONS: ^:nil ;; let an underscore be an underscore, disable sub-superscripting
#+OPTIONS: timestamp:nil

* Overview
Below is the [[http://ats-lang.org][ATS]] entry to the [[https://github.com/frol/completely-unscientific-benchmarks][Completely Unscientific Benchmarks]] challenge which
implements the [[https://en.wikipedia.org/wiki/Treap][Treap]] datastructure. The implementation is a literate program
that shows off some of ATS' typesafe memory management and pointer arithmetic
features. Please note that I do not explain the algorithms themselves, only the
code because ATS is quite complex and the essence of the datastructure gets lost in
memory management and linear logic details. I can highly recommend perusing the
[[https://github.com/frol/completely-unscientific-benchmarks/blob/master/nim/main.nim][Nim]] version to get an idea for how the datastructure works, I myself used it as
a guide. I also assume some familiarity with ML-like languages.

* Imports
First we need a couple of imports, the first one is standard and the second is
needed to generate the random number with which we seed the initial tree.
#+BEGIN_SRC text :tangle treap_manual.dats
#include "share/HATS/temptory_staload_bucs320.hats"
#staload STDLIB = "libats/libc/SATS/stdlib.sats"
#+END_SRC

* The Treap Datastructure
The treap datastructure can be encoded in a ML-like datatype:
#+BEGIN_SRC text :tangle treap_manual.dats
datavtype treap_vt =
  | treap_vt_nil
  | treap_vt_cons of (int,int,treap_vt,treap_vt)
#+END_SRC

It consists of two type constructors, ~treap_vt_nil~ which compiles to a null
pointer and represents the end of the tree or ~treap_vt_cons~ which is
parameterized on an ~int~ payload, that node's ~lint~ (long int) priority in the
tree and the left and right subtrees. The keyword ~datavtype~ (instead of
~datatype~) means that the treap is a linear resource allocated on the heap. The
ATS type system then tracks it to make sure it is accessed safely and properly
freed. Calling it ~treap_vt~ is a naming convention that makes it easier to see
that in code.
** Slower Treap Datastructure
An older version of this implementation used the following definition for the
datastructure:
#+BEGIN_EXAMPLE
datavtype treap_vt = treap_vt of (int,lint,Option_vt(treap_vt),Option_vt(treap_vt))
#+END_EXAMPLE
The difference is that instead of having an explicit 'nil' constructor the
datatype boxes the subtrees in an ~Option_vt~ which is viewtype on the familiar
ML ~Option~. The above is better from a code reuse standpoint but as Hongwei Xi,
the author of ATS pointed out, this extra layer of indirection added an almost
20% performance penalty.

* Freeing the treap
First we need a utility function to free the treap when we are done with it:
#+BEGIN_SRC text :tangle treap_manual.dats
extern fun free_treap(
  t : treap_vt
) : void

implement free_treap(t) =
  case+ t of
   | ~treap_vt_cons(_,_,l,r) => (free_treap(l); free_treap(r); ())
   | ~treap_vt_nil() => ()
#+END_SRC

The function definition and a type signature say that it takes a treap, consumes
the associated linear variable meaning it is no longer available and has no output.

The implementation shows a fun feature of ATS' pattern matching, the squiggle
'~' in front of the pattern tells ATS to automatically free the resource and
consume the associated linear variable when it matches the pattern. When the
treap contains some data it will match the '~treap_vt_cons(...)' which frees the
pointer to the treap and the treap's non-pointer data. Then all that remains is to
recursively free the subtrees. With the linear variable consumed the treap
can no longer be used in any subsequent code.

* Merge
The ~merge~ function signature says it takes two treaps, consumes them so they
are unavailable in any code following the merge and hands back a fresh treap.

#+BEGIN_SRC text :tangle treap_manual.dats
extern fun merge(
  lower: treap_vt,
  greater: treap_vt
): treap_vt
#+END_SRC

In reality the implementation cannibalizes the input treaps to make the
resulting one but that's safe since the arguments cannot be used after being passed to
~merge~.

Because it reuses parts of its input arguments ~merge~ is the most complex of
the ATS treap operations but also uses all the features I want to showcase. Once
~merge~ becomes clear so should to the rest of the operations so here we go:

#+BEGIN_SRC text :tangle treap_manual.dats
implement merge(lower,greater) =
  let
    var res : treap_vt
    fun loop (
          lower: treap_vt,
          greater: treap_vt,
          res: &treap_vt? >> treap_vt
        ) : void =
        case+ (lower,greater) of
          | (~treap_vt_nil(), ~treap_vt_nil()) => res := treap_vt_nil()
          | (l, ~treap_vt_nil()) => res := l
          | (~treap_vt_nil(), g) => res := g
          | (@treap_vt_cons(_,ly,_,lr), @treap_vt_cons(_,gy,gl,_)) =>
              if (ly < gy)
              then
                let
                  val lr_ = lr
                in
                  begin
                    res := lower;
                    fold@(greater);
                    loop(lr_,greater,lr);
                    fold@(res)
                  end
                end
              else
                let
                  val gl_ = gl
                in
                  begin
                    res := greater;
                    fold@(lower);
                    loop(lower,gl_,gl);
                    fold@(res)
                  end
                end
    val () = loop(lower,greater,res)
  in
    res
  end
#+END_SRC

Stepping back from the implementation details the overall structure of ~merge~
is:
#+BEGIN_EXAMPLE
implement merge(lower,greater) =
  let
    var res : treap_vt
    fun loop (...) ...
    val () = loop(lower,greater,res)
  in
    res
  end
#+END_EXAMPLE

Inside of the ~let~ block is a stack allocated variable ~res~ (that's what the
~var~ keyword means) that will hold the a pointer to merged treap,
a function ~loop~ which will traverse the trees recursively merging them into
~res~. ~loop~ is then invoked and the resulting pointer is returned outside the
~let~ block.

The type of ~res~ in ~loop~'s type signature is interesting:
#+BEGIN_EXAMPLE
fun loop (
      lower: treap_vt,
      greater: treap_vt,
      res: &treap_vt? >> treap_vt
    ) : void =
#+END_EXAMPLE

The ~&~ and ~?~ that bookend ~treap_vt~ say that ~res~ is a reference and
possibly uninitialized respectively which is what we expect since we are passing
a reference to a stack variable and haven't initialized it. Then rest of it, ~>>
treap_vt~ indicates that once the function is done executing that ~res~ is
guaranteed to some initialized and valid treap in memory.

The body of ~loop~ then pattern matches over the arguments. The first three
conditions say that ~res~ set to ~null~ when both treaps are ~null~ or the
non-null one if one of them is. Then the function terminates. The final
condition where the treaps need to be merged is the most complex case so let's
break it down by only looking at the case where the priority of the left subtree
is the lesser so the right subtree is merged into the left:
#+BEGIN_EXAMPLE
...
| (@treap_vt_cons(_,ly,_,lr), @treap_vt_cons(_,gy,gl,_)) =>
    if (ly < gy)
    then
      ...
    else
#+END_EXAMPLE

The new bit is the ~@~ in front of the pattern match. Called "unfolding" it is
another pattern matching shortcut which tells ATS to implicitly bring into scope
proofs that allow us to view the whole datastructure as a set of pointers (or
more precisely l-values) so we can mutate parts of it. In this case the ~@~
brings into scope proofs of pointers to the priority and right subtree of the
lower treap and the priority and left subtree of the greater treap. If you have
some familiarity with Rust you can think of this a much more generalized version
of borrowing a resource mutably.

In the body of the branch:
#+BEGIN_EXAMPLE
let
  val lr_ = lr
in
  begin
    res := lower;
    fold@(greater);
    loop(lr_,greater,lr);
    fold@(res)
  end
end
#+END_EXAMPLE

the subtree ~lr~ is then moved into ~lr_~ which is passed back into the
recursive call as the lower treap along with ~lr~ which is now a reference and
waiting to be filled in sometime before the recursive call terminates. The stack
variable ~res~ now points to the entire ~lower~ subtree since in this branch the
greater is merged into the lower. ~fold@(greater)~ is special typelevel function
which "re-folds" (consumes) the pointer proofs so they can no longer be treated
as l-values in subsequent code. The recursive call is made after which ~res~
which points to an "unfolded" ~lower~ treap also needs "refolding". If you have
some familarity with Rust it's like the closing curly brace which ends the scope
into which something is borrowed mutably. Another odd thing is in this branch we
have "unfolded" ~greater~ in the pattern match and re-folded it in the branch
without using it at all. This is purely for convenience sake, the function could
have been structured to avoid but there is no runtime cost since folding and
unfolding are erased after typechecking.

The rest of of the function does the same unfold-fold dance with the right subtree.

While most of this is sort of documented in ATS book's section on [[http://ats-lang.sourceforge.net/DOCUMENT/INT2PROGINATS/HTML/INT2PROGINATS-BOOK-onechunk.html#linear_lists][Linear Lists]]
it was quite difficult for me to understand and get right so if you find it
overwhelming and convoluted you are not alone. On the upside that's the last of
the concepts required for understanding the rest of the code.

* Split Binary
Splitting a treap into two along a value uses the same concepts we say in the [[Merge][merge]]
operation but instead of taking two treaps and returning one, it takes one treap
and a value and returns a pair:
#+BEGIN_SRC text :tangle treap_manual.dats
extern fun split_binary(
  t : treap_vt,
  i : int
): (treap_vt, treap_vt)

implement
split_binary(t,i) =
  let
    var tl_res: treap_vt
    var tr_res: treap_vt
    fun loop (
      t : treap_vt,
      i : int,
      tl_res: &treap_vt? >> treap_vt,
      tr_res: &treap_vt? >> treap_vt
    ) : void =
        case+ t of
        | ~treap_vt_nil() =>
           ( tl_res := treap_vt_nil()
           ; tr_res := treap_vt_nil() )
        | @treap_vt_cons (tx, ty, tl, tr) =>
          if (tx < i) then
            let
              val tr_ = tr
            in
              tl_res := t;
              loop(tr_, i, tr, tr_res);
              fold@(tl_res)
            end
          else
            let
              val tl_ = tl
            in
              tr_res := t;
              loop(tl_, i, tl_res, tl);
              fold@(tr_res)
            end
  in
    loop(t, i, tl_res, tr_res);
    (tl_res, tr_res)
  end
#+END_SRC

The ~let~ body is roughly the same, there is a ~loop~ function which traverses
the tree and going left or right depending on the priority at the node and the
subtree is "unfolded", moved and refolded so it can be mutated. Unlike [[Merge][merge]]
instead of a single stack variable here we have two, ~tl_res~ and ~tr_res~ to
build the left and right treap. Other than that if [[Merge][merge]] makes sense there's
nothing new to ~split_binary~.

** Slower Split Binary
As an aside the version above is roughly 20% faster than the one I had originally. The slower
version does not use any stack variables and passes back C structs on each
recursive call. The version above written by [[https://groups.google.com/d/msg/ats-lang-users/EaTmKO661yA/P6leqrb1CgAJ][Hongwei Xi]] brings this
implementation of treap up to the exact same performance of the fastest [[https://github.com/frol/completely-unscientific-benchmarks#linux-arch-linux-x64-intel-core-i7-4710hq-cpu-1][C++
version]].
#+BEGIN_EXAMPLE
implement split_binary(t,i) =
  let
    fun loop (
          curr : treap_vt
        ): (treap_vt, treap_vt) =
        case+ curr of
          | ~treap_vt_nil() => (treap_vt_nil(),treap_vt_nil())
          | @treap_vt_cons(lx,_,ll,lr) =>
              if (lx < i) then
                let
                  val _lr = lr
                  val (l,r) = loop(_lr)
                in
                  begin
                    lr := l;
                    fold@(curr);
                    (curr,r)
                  end
                end
              else
                let
                  val _ll = ll
                  val (l,r) = loop(_ll)
                in
                  begin
                    ll := r;
                    fold@(curr);
                    (l,curr)
                  end
                end
  in
    loop(t)
  end
#+END_EXAMPLE

* And the rest ...
The rest of the operations just delegate to the two primitives [[Merge][merge]] and [[Split Binary][split
binary]] so I'll just present them without explanation:

#+BEGIN_SRC text :tangle treap_manual.dats
extern fun merge3(
  l : treap_vt,
  eq : treap_vt,
  g : treap_vt
): treap_vt

implement merge3(l,eq,g) =
  merge(merge(l,eq),g)

extern fun split(
  t: treap_vt,
  i: int
): (treap_vt,treap_vt,treap_vt)

implement split(t,i) =
  let
    val+ (l,eq_gr) = split_binary(t,i)
    val+ (eq,gr) = split_binary(eq_gr,i+1)
  in
    (l,eq,gr)
  end

extern fun has_value(
  t: treap_vt,
  i: int
): (treap_vt, bool)

implement has_value(t,i) =
  let
    val+(l,eq,g) = split(t,i)
  in
    case+ eq of
      | ~treap_vt_nil() => (merge(l,g),false)
      | eq => (merge3(l,eq,g),true)
  end

extern fun new_treap(
  i: int
): treap_vt

implement new_treap(i) =
  treap_vt_cons(i,$STDLIB.rand(),treap_vt_nil(),treap_vt_nil())

extern fun insert(
  t: treap_vt,
  i: int
): treap_vt

implement insert(t,i) =
  let
    val+(l,eq,g) = split(t,i)
  in
    case+ eq of
      | ~treap_vt_nil() => merge3(l,new_treap(i),g)
      | _ => merge3(l,eq,g)
  end

extern fun erase(
  t : treap_vt,
  i : int
) : treap_vt

implement erase(t,i) =
  let
    val+(l,eq,g) = split(t,i)
  in
    begin
      free_treap(eq);
      merge(l,g)
    end
  end
#+END_SRC

The ~main~ function constructs a starter treap and kicks off a loop inserting
and deleting from the tree at some arbitrary intervals set forth by the
[[https://github.com/frol/completely-unscientific-benchmarks][benchmarks]].

#+BEGIN_SRC text :tangle treap_manual.dats
implement main0(argc,argv) =
  let
    fun loop(
      t: treap_vt,
      i: int,
      curr: int,
      res: int
    ):int =
      case+ i of
        | i when i >= 1000000 =>
          begin
            free_treap(t);
            res
          end
        | _ =>
          let
            val curr = (curr*57+43) % 10007
            val i = i+1
          in
            case (i % 3) of
              | 0 => loop(insert(t,curr),i,curr,res)
              | 1 => loop(erase(t,curr),i,curr,res)
              | 2 =>
                let
                  val+(t,found) = has_value(t,curr)
                in
                  if found then loop(t,i,curr,res+1)
                  else loop(t,i,curr,res)
                end
              | _ => loop(t,i,curr,res)
          end
  in
    println! (loop(treap_vt_nil(),1,5,0))
  end
#+END_SRC
